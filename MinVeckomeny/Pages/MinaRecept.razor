@inject MinVeckomeny.Data.DataService data;

<div>
	<h1 class="h3">Mina recept </h1>

	<div class="input-group mb-3">
		@if (searchFilter == "Receptnamn")
		{
			<input type="text" @bind="inputValue" @oninput="ShowSearchResult" class="form-control" placeholder="Sök...">
		}
		@if (searchFilter == "Ingrediens")
		{
			<InputSelect class="form-control ingredient-dropdown"
						 ValueExpression="@(() => inputValue)"
						 Value="@inputValue"
						 ValueChanged="@((string value) => FilterSearchResult(value, "ingredient", false))">

				<option style="display: none" value="">Sök...</option>

				@foreach (var item in allIngredients)
				{
					<option value="@item">@item</option>
				}
			</InputSelect>
		}
		@if (searchFilter == "Hashtag")
		{
			<InputSelect class="form-control ingredient-dropdown"
						 ValueExpression="@(() => inputValue)"
						 Value="@inputValue"
						 ValueChanged="@((string value) => FilterSearchResult(value, "hashtag", false))">
				<option style="display: none" value="">Sök...</option>
				@foreach (var item in allHashtags)
				{
					<option value="@item">@item</option>
				}
			</InputSelect>
		}
		<div class="input-group-prepend">
			<div class="dropdown">
				<a @onclick="() => ToggleDropDown(true)" class="btn btn-secondary dropdown-toggle" style="border-top-left-radius: 0px; border-bottom-left-radius: 0px" role="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
					@searchFilter
				</a>
				<div @onpointerleave="() => ToggleDropDown(false)" class=@dropDownStyle aria-labelledby="dropdownMenuButton">
					<a @onclick='() => searchFilter = "Receptnamn"' class="dropdown-item">Receptnamn</a>
					<a @onclick='() => searchFilter = "Ingrediens"' class="dropdown-item">Ingrediens</a>
					<a @onclick='() => searchFilter = "Hashtag"' class="dropdown-item">Hashtag</a>
					<a class="dropdown-item">
						<div class="form-check">
							<label class="form-check-label" for="flexCheckDefault">
								Visa endast veckans extrapriser
							</label>
							<input class="form-check-input" type="checkbox" @onclick='() => FilterSearchResult("","", true)' id="flexCheckDefault">
						</div>
					</a>
				</div>
			</div>
		</div>
	</div>

	@if (chosenIngredients.Count > 0)
	{
		foreach (var item in chosenIngredients)
		{
			<span id="@item" class="btn btn-light mx-1 my-1" style="background-color: #dce2c0"
			@onclick="@(() => RemoveFromChosenFilters(item, "ingredient"))">@item</span>
		}
	}

	@if (chosenHashtags.Count > 0)
	{
		foreach (var item in chosenHashtags)
		{
			<span id="@item" class="btn btn-light mx-1 my-1" style="background-color: #9cbab3"
			@onclick="@(() => RemoveFromChosenFilters(item, "hashtag"))">#@item</span>
		}
	}

	<br />
	<br />
	<div>
		<ul style="list-style-type: none; padding: 0px;">
			@foreach (var item in recipeListToDisplay)
			{
				<li style="display: flex; justify-content:space-between">
					<div style="display: flex">
						<div>
							@if (item.Image != "")
							{
								<div class="indexImage" style="background-image: url('/Images/@item.Image');
								margin-right: 1em"></div>
							}
						</div>
						<div style="display:flex; flex-direction: column; justify-content: space-between">
							<div>
							<a href="details/@item.Id" class="h4" style="text-decoration: none; color: black">
								@item.Name
							</a>
							<div>
								@item.Description
							</div>

							@foreach (var hashtag in hashtagsByRecipes[item.Id])
							{
								<span style="margin-right: 18px; color: #87c85a; font-size: 18px">#@hashtag</span>
							}
							</div>
							
							<div>
							@if (discountedIngredientsByRecipes.Count != 0 && discountedIngredientsByRecipes[item.Id] != 0)
							{
									<div style="background-color: #e9af77; color:white; width: 90px; border-radius: 15px;
									text-align:center; margin-bottom: 2px">
									<span style="font-weight:bold; font-size: 18px; padding: 5px">
										@discountedIngredientsByRecipes[item.Id] * rabatt</span>
								</div>
							}
							</div>

						</div>
					</div>
					<div style="display: flex; flex-direction: row; align-items: center; margin-right: 1em">
						<button @onclick="() => AddToVeckomeny(item.Id)"
								style="height: 30px; width: 30px; border-radius: 25px;
						display: flex; align-items: center; background-color: #abb7c7;
						border: none; justify-content: center; font-size: 15px; color: white;
						font-weight: bold">
							→
						</button>
					</div>
				</li>
				<hr />
			}
		</ul>
	</div>
</div>

@code {
	[CascadingParameter]
	public string NeedsUpdate { get; set; }
	[Parameter]
	public int RecipeToAddId { get; set; }
	private static int oldRecipeToAddId;
	static List<IndexModel> recipeList;
	static List<IndexModel> recipeListToDisplay;
	static Dictionary<int, List<string>> hashtagsByRecipes;
	static Dictionary<IndexModel, List<string>> ingredientsByRecipes;
	static Dictionary<int, int> discountedIngredientsByRecipes = new();
	[Parameter]
	public EventCallback<int> OnAddToVeckomeny { get; set; }
	private static bool alreadyInitialized;
	private string inputValue = "";
	private string dropDownStyle = "dropdown-menu";
	private string searchFilter = "Receptnamn";
	private static List<string> allIngredients;
	private static List<string> allHashtags;
	private static List<string> chosenIngredients = new();
	private static List<string> chosenHashtags = new();
	private IndexModel temp;
	bool visaExtrapriser = false;

	protected override async Task OnInitializedAsync()
	{
		if (!alreadyInitialized)
		{
			recipeList = data.GetAll();
			recipeListToDisplay = new List<IndexModel>(recipeList);
			hashtagsByRecipes = data.GetAllHashTagsByRecipes();
			ingredientsByRecipes = data.GettAllIngredientsByRecipes();
			allIngredients = data.GetAllIngredientNames();
			allHashtags = data.GetAllHashtagNames();
			await data.GetWeekIngrediets();
			discountedIngredientsByRecipes = data.GetNoOfDiscountsAndRecipeId();
			alreadyInitialized = true;
		}
	}

	protected override void OnParametersSet()
	{
		if (NeedsUpdate == "true")
		{
			recipeList = data.GetAll();
			recipeListToDisplay = new List<IndexModel>(recipeList);
			hashtagsByRecipes = data.GetAllHashTagsByRecipes();
			ingredientsByRecipes = data.GettAllIngredientsByRecipes();
			discountedIngredientsByRecipes = data.GetNoOfDiscountsAndRecipeId();
			NeedsUpdate = "false";
		}
		if (RecipeToAddId != 0 && oldRecipeToAddId != RecipeToAddId)
		{
			hashtagsByRecipes = data.GetAllHashTagsByRecipes();
			recipeList.Add(data.GetIndexModel(RecipeToAddId));
			recipeListToDisplay.Add(data.GetIndexModel(RecipeToAddId));
			oldRecipeToAddId = RecipeToAddId;
			RecipeToAddId = 0;
		}
	}

	private void AddToVeckomeny(int receptId)
	{
		OnAddToVeckomeny.InvokeAsync(receptId);
		recipeList = recipeList.Where(o => o.Id != receptId).ToList();
		recipeListToDisplay = recipeListToDisplay.Where(o => o.Id != receptId).ToList();
	}

	private void ShowSearchResult(ChangeEventArgs changeEvent)
	{
		inputValue = (string)changeEvent.Value;

		// recipeListToDisplay = recipeList.Where(o => o.Name.ToLower().Contains(inputValue.ToLower())).ToList();
		FilterSearchResult(inputValue, "fritext", false);
	}

	private void ToggleDropDown(bool show)
	{
		if (show)
		{
			dropDownStyle = "dropdown-menu show";
		}
		else
		{
			dropDownStyle = "dropdown-menu";
		}
	}


	private void FilterSearchResult(string filter, string type, bool toggle)
	{
		if (toggle)
		{
			visaExtrapriser = !visaExtrapriser;
		}

		if (type == "ingredient")
		{
			chosenIngredients.Add(filter);
			recipeListToDisplay = new List<IndexModel>(recipeList);
		}
		if (type == "hashtag")
		{
			chosenHashtags.Add(filter);
			recipeListToDisplay = new List<IndexModel>(recipeList);
		}

		// if (visaExtrapriser)
		// {
		// 	var veckansIngredienser = data.VeckansExtrapriser;
		// 	foreach (var item in ingredientsByRecipes)
		// 	{
		// 		bool remove = true;
		// 		foreach (var ingredient in veckansIngredienser)
		// 		{
		// 			if (item.Value.Contains(ingredient))
		// 			{
		// 				remove = false;
		// 			}
		// 		}

		// 		if (remove)
		// 		{
		// 			recipeListToDisplay = recipeList.Where(o => o.Id != item.Key.Id).ToList();
		// 		}
		// 	}
		// }

		if (type == "fritext")
		{
			recipeListToDisplay = recipeList.Where(o => o.Name.ToLower().Contains(inputValue.ToLower())).ToList();
		}

		if (chosenIngredients.Count > 0)
		{
			foreach (var entry in ingredientsByRecipes)
			{
				int counter = 0;

				foreach (var chosen in chosenIngredients)
				{
					if (entry.Value.Contains(chosen))
					{
						counter++;
					}
				}

				if (counter != chosenIngredients.Count)
				{
					recipeListToDisplay = recipeListToDisplay.Where(o => o.Id != entry.Key.Id).ToList();
				}
			}
		}

		if (chosenHashtags.Count > 0)
		{
			foreach (var item in recipeListToDisplay)
			{
				int counter = 0;
				foreach (var chosen in chosenHashtags)
				{
					if (hashtagsByRecipes[item.Id].Contains(chosen))
					{
						counter++;
					}
				}

				if (counter != chosenHashtags.Count)
				{
					recipeListToDisplay = recipeListToDisplay.Where(o => o.Id != item.Id).ToList();
				}
			}
		}
	}


	private void RemoveFromChosenFilters(string filter, string type)
	{

		if (type == "ingredient")
		{
			chosenIngredients.Remove(filter);
		}
		else
		{
			chosenHashtags.Remove(filter);
		}


		if (chosenIngredients.Count == 0)
		{
			recipeListToDisplay = new List<IndexModel>(recipeList);
		}

		if (chosenIngredients.Count > 0)
		{
			recipeListToDisplay.Clear();

			foreach (var entry in ingredientsByRecipes)
			{
				int counter = 0;

				foreach (var chosen in chosenIngredients)
				{
					if (entry.Value.Contains(chosen))
					{
						counter++;
					}
				}

				if (counter == chosenIngredients.Count)
				{
					recipeListToDisplay.Add(entry.Key);
				}
			}
		}

		if (chosenHashtags.Count > 0)
		{
			foreach (var item in recipeListToDisplay)
			{
				int counter = 0;
				foreach (var chosen in chosenHashtags)
				{
					if (hashtagsByRecipes[item.Id].Contains(chosen))
					{
						counter++;
					}
				}

				if (counter != chosenHashtags.Count)
				{
					IndexModel recipeToRemove = data.GetIndexModel(item.Id);
					recipeListToDisplay = recipeListToDisplay.Where(o => o.Id != item.Id).ToList();
				}
			}
		}
	}



}
